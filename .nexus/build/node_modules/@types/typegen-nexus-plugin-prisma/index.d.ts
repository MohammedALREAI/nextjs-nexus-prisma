import * as Typegen from 'nexus-plugin-prisma/typegen'
import * as Prisma from '../../.prisma/client';

// Pagination type
type Pagination = {
  first?: boolean
  last?: boolean
  before?: boolean
  after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'DateTime'

// Prisma model type definitions
interface PrismaModels {
  Faq: Prisma.Faq
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    faqs: {
      filtering: 'id' | 'title' | 'createdAt' | 'updatedAt' | 'body' | 'AND' | 'OR' | 'NOT'
      ordering: 'id' | 'title' | 'createdAt' | 'updatedAt' | 'body'
    }
  },
  Faq: {

  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    faq: 'Faq'
    faqs: 'Faq'
  },
  Mutation: {
    createOneFaq: 'Faq'
    updateOneFaq: 'Faq'
    updateManyFaq: 'BatchPayload'
    deleteOneFaq: 'Faq'
    deleteManyFaq: 'BatchPayload'
    upsertOneFaq: 'Faq'
  },
  Faq: {
    id: 'Int'
    title: 'String'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
    body: 'String'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  Faq: Typegen.NexusPrismaFields<'Faq'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  